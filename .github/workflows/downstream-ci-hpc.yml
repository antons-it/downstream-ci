name: downstream ci hpc

on:
  workflow_call:
    inputs:
      dev_runner:
        description: Whether to use runner with dev version of build-package-hpc .
        required: false
        type: boolean
      skip_matrix_jobs:
        description: List of matrix jobs to be skipped.
        required: false
        type: string
      eccodes:
        required: false
        type: string
      eckit:
        required: false
        type: string
      metkit:
        required: false
        type: string
      atlas:
        required: false
        type: string

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set Matrix
        id: set-matrix
        shell: python
        run: |
          import os
          import json
          import yaml

          matrix_yaml = """
            name:
            - gnu
            include:
            - name: gnu
              os: ubuntu-latest
              compiler: gnu
              compiler_cc: gcc
              compiler_cxx: g++
              compiler_fc: gfortran
          """

          matrix = yaml.safe_load(matrix_yaml)

          skip_jobs = """${{ inputs.skip_matrix_jobs }}""".splitlines()
          if skip_jobs:
            matrix['name'] = [name for name in matrix['name'] if name not in skip_jobs]
            matrix['include'] = [d for d in matrix['include'] if d['name'] not in skip_jobs]

          print("Build matrix:")
          print(yaml.dump(matrix, sort_keys=False))

          with open(os.getenv("GITHUB_OUTPUT"), "a") as f:
              print(f"matrix<<EOF", file=f)
              print(json.dumps(matrix, separators=(',', ':')), file=f)
              print("EOF", file=f)

  eccodes:
    name: eccodes
    needs: [setup]
    if: ${{ inputs.eccodes }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@feature/hpc-action
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ inputs.eccodes }}
          build_config: .github/ci-hpc-config.yml

  eckit:
    name: eckit
    needs: [setup]
    if: ${{ inputs.eckit }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@feature/hpc-action
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ inputs.eckit }}
          build_config: .github/ci-hpc-config.yml

  metkit:
    needs: [eckit, eccodes]
    if: ${{ always() && (contains(join(needs.*.result, ','), 'success') || inputs.metkit) }}
    name: metkit
    uses: ecmwf/metkit/.github/workflows/reusable-ci-hpc.yml@develop
    with:
      metkit: ${{ inputs.metkit }}
      eckit: ${{ inputs.eckit }}
      eccodes: ${{ inputs.eccodes }}
    secrets: inherit

  atlas:
    needs: [eckit]
    if: ${{ always() && (contains(join(needs.*.result, ','), 'success') || inputs.atlas) }}
    name: atlas
    uses: ecmwf/atlas/.github/workflows/reusable-ci-hpc.yml@develop
    with:
      atlas: ${{ inputs.atlas }}
      eckit: ${{ inputs.eckit }}
    secrets: inherit
