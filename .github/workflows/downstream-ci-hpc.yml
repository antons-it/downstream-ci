name: downstream ci hpc

on:
  workflow_call:
    inputs:
      dev_runner:
        description: Whether to use runner with dev version of build-package-hpc .
        required: false
        type: boolean
      skip_matrix_jobs:
        description: List of matrix jobs to be skipped.
        required: false
        type: string
      # packages
      atlas:
        required: false
        type: string
      cfgrib:
        required: false
        type: string
      eccodes:
        required: false
        type: string
      eccodes-python:
        required: false
        type: string
      ecflow:
        required: false
        type: string
      ecflow-light:
        required: false
        type: string
      eckit:
        required: false
        type: string
      fckit:
        required: false
        type: string
      fdb:
        required: false
        type: string
      metkit:
        required: false
        type: string
      mir:
        required: false
        type: string
      multiurl:
        required: false
        type: string 
      odc:
        required: false
        type: string
      pdbufr:
        required: false
        type: string
      plume:
        required: false
        type: string
      pyfdb:
        required: false
        type: string
      pyodc:
        required: false
        type: string
      skinnywms:
        required: false
        type: string
      thermofeel:
        required: false
        type: string
      earthkit-data:
        required: false
        type: string


jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      dep_tree: ${{ steps.setup.outputs.build_package_hpc_dep_tree }}
      atlas: ${{ steps.setup.outputs.atlas }}
      cfgrib: ${{ steps.setup.outputs.cfgrib }}
      eccodes: ${{ steps.setup.outputs.eccodes }}
      eccodes-python: ${{ steps.setup.outputs.eccodes-python }}
      ecflow: ${{ steps.setup.outputs.ecflow }}
      ecflow-light: ${{ steps.setup.outputs.ecflow-light }}
      eckit: ${{ steps.setup.outputs.eckit }}
      fckit: ${{ steps.setup.outputs.fckit }}
      fdb: ${{ steps.setup.outputs.fdb }}
      metkit: ${{ steps.setup.outputs.metkit }}
      mir: ${{ steps.setup.outputs.mir }}
      multiurl: ${{ steps.setup.outputs.multiurl }}
      odc: ${{ steps.setup.outputs.odc }}
      pdbufr: ${{ steps.setup.outputs.pdbufr }}
      plume: ${{ steps.setup.outputs.plume }}
      pyfdb: ${{ steps.setup.outputs.pyfdb }}
      pyodc: ${{ steps.setup.outputs.pyodc }}
      skinnywms: ${{ steps.setup.outputs.skinnywms }}
      thermofeel: ${{ steps.setup.outputs.thermofeel }}
      earthkit-data: ${{ steps.setup.outputs.earthkit-data }}
    steps:
      - name: checkout reusable wfs repo
        uses: actions/checkout@v4
        with:
          repository: "ecmwf-actions/downstream-ci"
          ref: "main"

      - name: Run setup script
        id: setup
        env:
          TOKEN: ${{ secrets.GH_REPO_READ_TOKEN }}
          CONFIG: |
            ecmwf/atlas:
              path: .github/ci-hpc-config.yml
              input: ${{ inputs.atlas }}
            ecmwf/cfgrib:
              path: .github/ci-hpc-config.yml
              master_branch: master
              develop_branch: master
              python: true
              input: ${{ inputs.cfgrib }}
            ecmwf/eccodes:
              path: .github/ci-hpc-config.yml
              input: ${{ inputs.eccodes }}
            ecmwf/eccodes-python:
              path: .github/ci-hpc-config.yml
              python: true
              input: ${{ inputs.eccodes-python }}
            ecmwf/ecflow:
              path: .github/ci-hpc-config.yml
              input: ${{ inputs.ecflow }}
            ecmwf/ecflow-light:
              path: .github/ci-hpc-config.yml
              input: ${{ inputs.ecflow-light }}
            ecmwf/eckit:
              path: .github/ci-hpc-config.yml
              input: ${{ inputs.eckit }}
            ecmwf/fckit:
              path: .github/ci-hpc-config.yml
              input: ${{ inputs.fckit }}
            ecmwf/fdb:
              path: .github/ci-hpc-config.yml
              input: ${{ inputs.fdb }}
            ecmwf/metkit:
              path: .github/ci-hpc-config.yml
              input: ${{ inputs.metkit }}
            ecmwf/mir:
              path: .github/ci-hpc-config.yml
              input: ${{ inputs.mir }}
            ecmwf/multiurl:
              path: .github/ci-hpc-config.yml
              master_branch: main
              develop_branch: main
              python: true
              input: ${{ inputs.multiurl }}
            ecmwf/odc:
              path: .github/ci-hpc-config.yml
              input: ${{ inputs.odc }}
            ecmwf/pdbufr:
              path: .github/ci-hpc-config.yml
              python: true
              master_branch: master
              develop_branch: master
              input: ${{ inputs.pdbufr }}
            ecmwf/plume:
              path: .github/ci-hpc-config.yml
              input: ${{ inputs.plume }}
            ecmwf/pyfdb:
              path: .github/ci-hpc-config.yml
              python: true
              input: ${{ inputs.pyfdb }}
            ecmwf/pyodc:
              path: .github/ci-hpc-config.yml
              python: true
              input: ${{ inputs.pyodc }}
            ecmwf/skinnywms:
              path: .github/ci-hpc-config.yml
              python: true
              input: ${{ inputs.skinnywms }}
            ecmwf/thermofeel:
                path: .github/ci-hpc-config.yml
                python: true
                input: ${{ inputs.thermofeel }}
            ecmwf/earthkit-data:
              path: .github/ci-hpc-config.yml
              python: true
              master_branch: main
              input: ${{ inputs.earthkit-data }}
          SKIP_MATRIX_JOBS: |
            gnu-10.3.0
            ${{ inputs.skip_matrix_jobs }}
          PYTHON_VERSIONS: |
            - "3.10"
          PYTHON_JOBS: |
            - gnu-8.5.0
          MATRIX: |
            name:
            - gnu-12.2.0
            - gnu-8.5.0
            - gnu-10.3.0
            - nvidia-22.11
            - intel-2021.4.0
            include:
            - name: gnu-12.2.0
              compiler: gnu-12.2.0
              compiler_cc: gcc
              compiler_cxx: g++
              compiler_fc: gfortran
              compiler_modules: gcc/12.2.0
            - name: gnu-8.5.0
              compiler: gnu-8.5.0
              compiler_cc: gcc
              compiler_cxx: g++
              compiler_fc: gfortran
              compiler_modules: gcc/8.5.0
            - name: gnu-10.3.0
              compiler: gnu-10.3.0
              compiler_cc: gcc
              compiler_cxx: g++
              compiler_fc: gfortran
              compiler_modules: gcc/10.3.0
            - name: nvidia-22.11
              compiler: nvidia-22.11
              compiler_cc: nvc
              compiler_cxx: nvc++
              compiler_fc: nvfortran
              compiler_modules: prgenv/nvidia,nvidia/22.11
            - name: intel-2021.4.0
              compiler: intel-2021.4.0
              compiler_cc: icc
              compiler_cxx: icpc
              compiler_fc: ifort
              compiler_modules: prgenv/intel,intel/2021.4.0
        run: python setup_downstream_ci.py

  atlas:
    name: atlas
    needs: [setup, eckit, fckit]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.atlas && (inputs.eckit || inputs.atlas || inputs.fckit) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.atlas) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }}
          dependencies: |
            ${{ inputs.eckit }}
            ${{ inputs.fckit }}

  cfgrib:
    name: cfgrib
    needs: [setup, eccodes, eccodes-python]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.cfgrib && (inputs.eccodes-python || inputs.eccodes || inputs.cfgrib) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.cfgrib) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }}
          dependencies: |
            ${{ inputs.eccodes }}
          python_dependencies: |
            ${{ inputs.eccodes-python }}

  eccodes:
    name: eccodes
    needs: [setup]
    if: ${{ inputs.eccodes && needs.setup.outputs.eccodes }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.eccodes) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }}

  eccodes-python:
    name: eccodes-python
    needs: [setup, eccodes]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.eccodes-python && (inputs.eccodes || inputs.eccodes-python) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.eccodes-python) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }}
          dependencies: |
            ${{ inputs.eccodes }}

  ecflow:
    name: ecflow
    needs: [setup]
    if: ${{ inputs.ecflow && needs.setup.outputs.ecflow }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.ecflow) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }}

  ecflow-light:
    name: ecflow-light
    needs: [setup]
    if: ${{ inputs.ecflow-light && needs.setup.outputs.ecflow-light }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.ecflow-light) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }}

  eckit:
    name: eckit
    needs: [setup]
    if: ${{ inputs.eckit && needs.setup.outputs.eckit }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.eckit) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }}

  fckit:
    name: fckit
    needs: [setup, eckit]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.fckit && (inputs.eckit || inputs.fckit) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.fckit) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }}
          dependencies: |
            ${{ inputs.eckit }}

  fdb:
    name: fdb
    needs: [setup, eckit, eccodes, metkit]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.fdb && (inputs.eckit || inputs.eccodes || inputs.metkit || inputs.fdb) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.fdb) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }}
          dependencies: |
            ${{ inputs.eckit }}
            ${{ inputs.eccodes }}
            ${{ inputs.metkit }}

  metkit:
    name: metkit
    needs: [setup, eckit, eccodes]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.metkit && (inputs.eckit || inputs.eccodes || inputs.metkit) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.metkit) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }}
          dependencies: |
            ${{ inputs.eckit }}
            ${{ inputs.eccodes }}

  mir:
    name: mir
    needs: [setup, eckit, eccodes, atlas]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.mir && (inputs.eckit || inputs.eccodes || inputs.atlas || inputs.mir) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.mir) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }}
          dependencies: |
            ${{ inputs.eckit }}
            ${{ inputs.eccodes }}
            ${{ inputs.atlas }}

  multiurl:
    name: multiurl
    needs: [setup]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.multiurl && (inputs.multiurl) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.multiurl) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }}

  odc:
    name: odc
    needs: [setup, eckit]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.odc && (inputs.eckit || inputs.odc) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.odc) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }}
          dependencies: |
            ${{ inputs.eckit }}

  pdbufr:
    name: pdbufr
    needs: [setup, eccodes, eccodes-python]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.pdbufr && (inputs.eccodes || inputs.eccodes-python || inputs.pdbufr) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.pdbufr) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }}
          dependencies: |
            ${{ inputs.eccodes }}
          python_dependencies: |
            ${{ inputs.eccodes-python }}

  plume:
    name: plume
    needs: [setup, eckit, fckit, atlas]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.plume && (inputs.eckit || inputs.fckit || inputs.atlas || inputs.plume) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.plume) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }}
          dependencies: |
            ${{ inputs.eckit }}
            ${{ inputs.fckit }}
            ${{ inputs.atlas }}

  pyfdb:
    name: pyfdb
    needs: [setup, eckit, eccodes, metkit, fdb]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.pyfdb && (inputs.eckit || inputs.eccodes || inputs.metkit || inputs.fdb || inputs.pyfdb) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.pyfdb) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }}
          dependencies: |
            ${{ inputs.eckit }}
            ${{ inputs.eccodes }}
            ${{ inputs.metkit }}
            ${{ inputs.fdb }}

  pyodc:
    name: pyodc
    needs: [setup, eckit, odc]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.pyodc && (inputs.eckit || inputs.odc || inputs.pyodc) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.pyodc) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }}
          dependencies: |
            ${{ inputs.eckit }}
            ${{ inputs.odc}}

  skinnywms:
    name: skinnywms
    needs: [setup]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.skinnywms && inputs.skinnywms }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.skinnywms) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }}

  thermofeel:
    name: thermofeel
    needs: [setup]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.thermofeel && inputs.thermofeel }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.thermofeel) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }} 

  earthkit-data:
    name: earthkit-data
    needs: [setup, cfgrib, pdbufr, pyodc]
    if: ${{ (always() && !cancelled()) && contains(join(needs.*.result, ','), 'success') && needs.setup.outputs.earthkit-data && (inputs.cfgrib || inputs.eccodes-python || inputs.multiurl || inputs.pdbufr || inputs.pyodc || inputs.earthkit-data) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.earthkit-data) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    env:
      DEP_TREE: ${{ needs.setup.outputs.dep_tree }}
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ matrix.owner_repo_ref }}
          build_config: ${{ matrix.config_path }}
          python_dependencies: |
            ${{ inputs.cfgrib }}
            ${{ inputs.eccodes-python }}
            ${{ inputs.multiurl }}
            ${{ inputs.pdbufr }}
            ${{ inputs.pyodc }}


