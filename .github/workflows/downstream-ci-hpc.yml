name: downstream ci hpc

on:
  workflow_call:
    inputs:
      dev_runner:
        description: Whether to use runner with dev version of build-package-hpc .
        required: false
        type: boolean
      skip_matrix_jobs:
        description: List of matrix jobs to be skipped.
        required: false
        type: string
      eccodes:
        required: false
        type: string
      eckit:
        required: false
        type: string
      metkit:
        required: false
        type: string
      atlas:
        required: false
        type: string
      mir:
        required: false
        type: string
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set Matrix
        id: set-matrix
        shell: python
        run: |
          import os
          import json
          import yaml

          matrix_yaml = """
            name:
            - gnu-12.2.0
            - gnu-8.5.0
            - gnu-10.3.0
            include:
            - name: gnu-12.2.0
              compiler: gnu-12.2.0
              compiler_cc: gcc
              compiler_cxx: g++
              compiler_fc: gfortran
              compiler_modules: gcc/12.2.0
            - name: gnu-8.5.0
              compiler: gnu-8.5.0
              compiler_cc: gcc
              compiler_cxx: g++
              compiler_fc: gfortran
              compiler_modules: gcc/8.5.0
            - name: gnu-10.3.0
              compiler: gnu-10.3.0
              compiler_cc: gcc
              compiler_cxx: g++
              compiler_fc: gfortran
              compiler_modules: gcc/10.3.0
          """

          matrix = yaml.safe_load(matrix_yaml)

          skip_jobs = """${{ inputs.skip_matrix_jobs }}""".splitlines()
          if skip_jobs:
            matrix['name'] = [name for name in matrix['name'] if name not in skip_jobs]
            matrix['include'] = [d for d in matrix['include'] if d['name'] not in skip_jobs]

          print("Build matrix:")
          print(yaml.dump(matrix, sort_keys=False))

          with open(os.getenv("GITHUB_OUTPUT"), "a") as f:
              print(f"matrix<<EOF", file=f)
              print(json.dumps(matrix, separators=(',', ':')), file=f)
              print("EOF", file=f)

  eccodes:
    name: eccodes
    needs: [setup]
    if: ${{ inputs.eccodes }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ inputs.eccodes || 'ecmwf/eccodes@develop' }}
          build_config: .github/ci-hpc-config.yml

  eckit:
    name: eckit
    needs: [setup]
    if: ${{ inputs.eckit }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ inputs.eckit || 'ecmwf/eckit@develop' }}
          build_config: .github/ci-hpc-config.yml

  metkit:
    name: metkit
    needs: [setup, eckit, eccodes]
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') && (inputs.eckit || inputs.eccodes || inputs.metkit) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ inputs.metkit || 'ecmwf/metkit@develop' }}
          build_config: .github/ci-hpc-config.yml
          dependencies: |
            ${{ inputs.eckit }}
            ${{ inputs.eccodes }}

  atlas:
    name: atlas
    needs: [setup, eckit]
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') && (inputs.eckit || inputs.atlas) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ inputs.atlas || 'ecmwf/atlas@develop' }}
          build_config: .github/ci-hpc-config.yml
          dependencies: |
            ${{ inputs.eckit }}

  mir:
    name: mir
    needs: [setup, eckit, eccodes, atlas]
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') && (inputs.eckit || inputs.eccodes || inputs.atlas || inputs.mir) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    runs-on:
      [self-hosted, linux, "${{ inputs.dev_runner && 'hpc-dev' || 'hpc' }}"]
    steps:
      - uses: ecmwf-actions/reusable-workflows/ci-hpc@v2
        with:
          github_user: ${{ secrets.BUILD_PACKAGE_HPC_GITHUB_USER }}
          github_token: ${{ secrets.GH_REPO_READ_TOKEN }}
          troika_user: ${{ inputs.dev_runner && secrets.HPC_DEV_CI_SSH_USER || secrets.HPC_CI_SSH_USER }}
          repository: ${{ inputs.mir || 'ecmwf/mir@develop' }}
          build_config: .github/ci-hpc-config.yml
          dependencies: |
            ${{ inputs.eckit }}
            ${{ inputs.eccodes }}
            ${{ inputs.atlas }}
